so = 'ASC'
p = Payload(q, tab, qn, s, so)
load = p.generate_payload()
#working
#https://adams.nrc.gov/wba/services/search/advanced/nrc?q=(mode:sections,sections:(filters:(public-library:!t),properties_search_any:!(!(DocumentType,ends,%27Enforcement+Action%27,%27%27)),single_content_search:%27Gamma+Knife%27))&qn=New&tab=content-search-pars&s=PublishDatePARS&so=ASC
#not
#https://adams.nrc.gov/wba/services/search/advanced/nrc?q=%28mode%3Asections%2Csections%3A%28+filters%3A%28public-library%3A%21t%29%2C%29%2Cproperties_search_any%3A%21%28%21%28DocumentType%2Cends%2C%27Enforcement%2BAction%27%2C%27%27%29%29%2Csingle_content_search%3A%27Gamma%2BKnife%C3%A2%E2%82%AC%E2%84%A2%29%29&tab=content-search-pars&qn=New&s=PublishDatePARS&so=ASC
#http://adams.nrc.gov/wba/services/search/advanced/nrc?q=( mode:sections,sections:( filters:( public-library:!t), ),properties_search_any:!( !(DocumentType,ends,'Enforcement+Action','') ),single_content_search:'Gamma+Knifeâ€™ ) )&qn=New&tab=content-search-pars&s=DocumentDate&so=DESC
#requests is stripping parens
r=requests.get(NRC_BASE_URL, params = load)
r
r.content
r.url
rem._encode_params(load)
k = to_key_val_list(load)
k,v = to_key_val_list(load)
k = to_key_val_list(load)
k
k0 = k[0]
k0
k,v = k[0]
isinstance(v, basestring)
v
import basestring
from past.builtins import basestring    # pip install future
isinstance(v, basestring)
isinstance(vs, basestring) #true
k,vs = k[0]
isinstance(vs, basestring) #true
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
for v in vs:
vs = [vs]
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
for v in vs:
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
k,vs = k[0]
isinstance(vs, basestring) #true
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
for v in vs:
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
k,vs = k[0]
isinstance(vs, basestring) #true
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
for v in vs:
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
reticulate::repl_python()
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
for v in vs:
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
vs
reticulate::repl_python()
k,vs = k[0]
isinstance(vs, basestring) #true
k, vs = k[0]
k, vs = k[0]
k = to_key_val_list(load)
k, vs = k[0]
isinstance(vs, basestring) #true
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
vs
result = []
for v in vs:
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
result
k, vs = k[0]
isinstance(vs, basestring) #true
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
result = []
for v in vs:
print
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
k, vs = k[0]
isinstance(vs, basestring) #true
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
result = []
for v in vs:
print(v)
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
for v in vs:
print(v, ...)
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
k = to_key_val_list(load)
k, vs = k[0]
isinstance(vs, basestring) #true
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
result = []
for v in vs:
print(v, ...)
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
k
vs
for v in vs: print(v)
v
vs
v
v.encode('utf-8')
[v for v in v]
[v.encode('utf-8') for v in v]
v.encode('utf-8')
k = to_key_val_list(load)
k, vs = k[0]
isinstance(vs, basestring) #true
if isinstance(vs, basestring) or not hasattr(vs, '__iter__'):
vs = [vs]
result = []
for v in vs:
print(v, ...)
if v is not None:
result.append(
(k.encode('utf-8') if isinstance(k, str) else k,
v.encode('utf-8') if isinstance(v, str) else v))
result
result
urlencode(result)
from requests.compat import urlencode
urlencode(result)
urlencode()
urlencode
urlencode.__code__
import urllib
from urllib.parse import urlencode
urlencode()
urlencode
urlencode.__doc__
result
urlencode('https://adams.nrc.gov/wba/services/search/advanced/nrc?q=(mode:sections,sections:(filters:(public-library:!t),properties_search_any:!(!(DocumentType,ends,%27Enforcement+Action%27,%27%27)),single_content_search:%27Gamma+Knife%27))&qn=New&tab=content-search-pars&s=PublishDatePARS&so=ASC')
urlencode(result)
urlencode(result)
reticulate::repl_python()
from urllib.parse import urlencode
urlencode(result)
from urllib.parse import urlencode, quote
urlencode(query=result, doseq=True, safe='()', quote_via=quote)
urlencode(query=result, doseq=True, safe='():', quote_via=quote)
urlencode(query=result, doseq=True, safe='():!', quote_via=quote)
urlencode(query=result, doseq=True, safe='():!,', quote_via=quote)
urlencode(query=result, doseq=True, safe='():!', quote_via=quote)
urlencode(query=result, doseq=True, safe='():!,', quote_via=quote)
urlencode(query=result, doseq=True, safe='():!,%', quote_via=quote)
import requests.models
self.door.close()
class SecurityDoor:
colour = 'gray'
locked = True
def __init__(self, number, status):
self.door = Door(number, status)
def open(self):
if self.locked:
return
self.door.open()
def close(self):
self.door.close()
class SecurityDoor:
colour = 'gray'
locked = True
def __init__(self, number, status):
self.door = Door(number, status)
def open(self):
if self.locked:
return
self.door.open()
def close(self):
self.door.close()
a = SecurityDoor()
a = SecurityDoor(1,'a')
class Library_type(object):
def __init__(self, library_type)
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
return library_types[Library_type]
class Filters(object):
def __init__(self, library_type):
self.library_type = Library_type(library_type)
class Library_type(object):
def __init__(self, library_type)
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
return library_types[Library_type]
class Library_type(object):
def __init__(self, library_type):
library_types = {'public' : 'public-library:!t',
class Library_type(object):
def __init__(self, library_type):
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
return library_types[Library_type]
reticulate::repl_python()
class Library_type(object):
def __init__(self, library_type):
library_types = {'public' : 'public-library:!t',
class Library_type(object):
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
def __init__(self, library_type, library_types):
return library_types[library_type]
class Library_type(object):
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
def __init__(self, library_type, library_types):
return library_types[library_type]
class Filters(object):
def __init__(self, library_type):
self.library_type = Library_type(library_type)
self.library_type = Library_type(library_type)
return(self.library_type)
a = Library_type('public')
a = Library_type('public', library_types)
class Library_type(object):
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
def __init__(self, library_type, library_types = library_types):
return library_types[library_type]
a = Library_type('public', library_types)
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
class Library_type(object):
def __init__(self, library_type, library_types = library_types):
return library_types[library_type]
class Filters(object):
def __init__(self, library_type):
self.library_type = Library_type(library_type)
return(self.library_type)
a = Library_type('public', library_types)
class Library(object):
def __init__(self, library_type, library_types = library_types):
self.type = library_types[library_type]
class Filters(object):
def __init__(self, library_type):
self.library_type = Library_type(library_type)
return(self.library_type)
a = Library('public', library_types)
a.type
f = Filters(a)
f = Filters('public')
class Filters(object):
def __init__(self, library_type):
self.library_type = Library(library_type, library_types)
return(self.library_type)
a = Library('public', library_types)
a.type
f = Filters('public')
f = Filters('public')
class Library_type(object):
def __init__(self, library_type, library_types = library_types):
self.library_type = library_types[library_type]
a = Library_type('public', library_types)
a.type
a.library_type
class Filters(object):
def __init__(self):
pass
def library_type(self):
return  Library(library_type, library_types)
f = Filters.library_type()
class Filters(object):
def __init__(self):
pass
def library_type(library_type):
return  Library(library_type, library_types)
f = Filters.library_type()
f = Filters.library_type('pub')
f = Filters.library_type('public')
f
f.type
class Filters(object):
def __init__(self):
pass
def library_type(library_type):
return  Library(library_type, library_types).type
f = Filters.library_type
f.type
f
f('public')
class Filters(object):
def __init__(self):
pass
@property
def library_type(library_type):
return  Library(library_type, library_types).type
f = Filters.library_type
f
f
f.type
print(f)
class Filters(object):
def __init__(self):
pass
def library_type(library_type):
return  Library(library_type, library_types).type
f = Filters.library_type
Filters.library_type
Filters.library_type('public')
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
self._filter_string =+  Library(self, library_type, library_types).type
return self
Filters.library_type('public')
Filters.library_type()
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(library_type):
self._filter_string =+  Library(self, library_type, library_types).type
return self
Filters.library_type()
Filters.library_type('public')
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
self._filter_string =+  Library(library_type, library_types).type
return self
Filters.library_type('public')
Filters.library_type()
f = Filters
lib_filter = Filters()
lib_filter.library_type('public')
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
self._filter_string =+  Library(library_type, library_types).type
return self
lib_filter.library_type('public')
a = Library_type('public', library_types)
a.library_type
a.library_type +'1'
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
self._filter_string =+  Library(library_type, library_types).library_type
return self
lib_filter.library_type('public')
lib_filter = Filters()
lib_filter.library_type('public')
class Library_type(object):
def __init__(self, library_type, library_types = library_types):
self.library_type = library_types[library_type]
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
self._filter_string =+  Library(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type +
a.library_type
lib_filter = Filters()
lib_filter.library_type('public')
class Library_type(object):
def __init__(self, library_type, library_types = library_types):
self.library_type = library_types[library_type]
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
self._filter_string =+  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
lib_filter.library_type('public')
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
print(Library_type(library_type, library_types).library_type)
self._filter_string =+  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
lib_filter.library_type('public')
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
print(Library_type(library_type, library_types).library_type)
self._filter_string =+  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
lib_filter.library_type('public')
class Filters(object):
def __init__(self):
self._filter_string = ''
def library_type(self, library_type):
print(Library_type(library_type, library_types).library_type)
self._filter_string =+  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
lib_filter.library_type('public')
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
print(Library_type(library_type, library_types).library_type)
self._filter_string =+  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
lib_filter.library_type('public')
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
class Library_type(object):
def __init__(self, library_type, library_types = library_types):
self.library_type = library_types[library_type]
class Filters(object):
def __init__(self):
self._filter_string = None
def library_type(self, library_type):
print(Library_type(library_type, library_types).library_type)
self._filter_string +=  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
lib_filter.library_type('public')
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
class Library_type(object):
def __init__(self, library_type, library_types = library_types):
self.library_type = library_types[library_type]
class Filters(object):
def __init__(self):
self._filter_string = ''
def library_type(self, library_type):
print(Library_type(library_type, library_types).library_type)
self._filter_string +=  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
lib_filter.library_type('public')
Filters().library_type('public')
Filters().library_type('public')._filter_string
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
class Library_type(object):
def __init__(self, library_type, library_types = library_types):
self.library_type = library_types[library_type]
class Filters(object):
def __init__(self):
self.filters = ''
def library_type(self, library_type):
#print(Library_type(library_type, library_types).library_type)
self._filter_string +=  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
Filters().library_type('public').filters
library_types = {'public' : 'public-library:!t',
'legacy' : 'legacy-library:!t'}
class Library_type(object):
def __init__(self, library_type, library_types = library_types):
self.library_type = library_types[library_type]
class Filters(object):
def __init__(self):
self.filters = ''
def library_type(self, library_type):
#print(Library_type(library_type, library_types).library_type)
self.filters +=  Library_type(library_type, library_types).library_type
return self
a = Library_type('public', library_types)
a.library_type
lib_filter = Filters()
Filters().library_type('public').filters
Filters().library_type('public').library_type('legacy').filters
